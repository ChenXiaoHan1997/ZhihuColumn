package practice.cxh.zhihuzhuanlan.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import practice.cxh.zhihuzhuanlan.entity.SubscribeEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SUBSCRIBE_ENTITY".
*/
public class SubscribeEntityDao extends AbstractDao<SubscribeEntity, String> {

    public static final String TABLENAME = "SUBSCRIBE_ENTITY";

    /**
     * Properties of entity SubscribeEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property ColumnSlug = new Property(0, String.class, "columnSlug", true, "COLUMN_SLUG");
        public final static Property Subscribed = new Property(1, boolean.class, "subscribed", false, "SUBSCRIBED");
    }


    public SubscribeEntityDao(DaoConfig config) {
        super(config);
    }
    
    public SubscribeEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SUBSCRIBE_ENTITY\" (" + //
                "\"COLUMN_SLUG\" TEXT PRIMARY KEY NOT NULL ," + // 0: columnSlug
                "\"SUBSCRIBED\" INTEGER NOT NULL );"); // 1: subscribed
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SUBSCRIBE_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, SubscribeEntity entity) {
        stmt.clearBindings();
 
        String columnSlug = entity.getColumnSlug();
        if (columnSlug != null) {
            stmt.bindString(1, columnSlug);
        }
        stmt.bindLong(2, entity.getSubscribed() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, SubscribeEntity entity) {
        stmt.clearBindings();
 
        String columnSlug = entity.getColumnSlug();
        if (columnSlug != null) {
            stmt.bindString(1, columnSlug);
        }
        stmt.bindLong(2, entity.getSubscribed() ? 1L: 0L);
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public SubscribeEntity readEntity(Cursor cursor, int offset) {
        SubscribeEntity entity = new SubscribeEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // columnSlug
            cursor.getShort(offset + 1) != 0 // subscribed
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, SubscribeEntity entity, int offset) {
        entity.setColumnSlug(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setSubscribed(cursor.getShort(offset + 1) != 0);
     }
    
    @Override
    protected final String updateKeyAfterInsert(SubscribeEntity entity, long rowId) {
        return entity.getColumnSlug();
    }
    
    @Override
    public String getKey(SubscribeEntity entity) {
        if(entity != null) {
            return entity.getColumnSlug();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(SubscribeEntity entity) {
        return entity.getColumnSlug() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
