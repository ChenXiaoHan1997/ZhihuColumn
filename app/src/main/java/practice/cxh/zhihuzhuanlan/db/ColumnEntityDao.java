package practice.cxh.zhihuzhuanlan.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import practice.cxh.zhihuzhuanlan.entity.ColumnEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "COLUMN_ENTITY".
*/
public class ColumnEntityDao extends AbstractDao<ColumnEntity, String> {

    public static final String TABLENAME = "COLUMN_ENTITY";

    /**
     * Properties of entity ColumnEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Slug = new Property(0, String.class, "slug", true, "SLUG");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Avatar = new Property(2, String.class, "avatar", false, "AVATAR");
        public final static Property Description = new Property(3, String.class, "description", false, "DESCRIPTION");
        public final static Property FollowersCount = new Property(4, int.class, "followersCount", false, "FOLLOWERS_COUNT");
        public final static Property PostsCount = new Property(5, int.class, "postsCount", false, "POSTS_COUNT");
    }


    public ColumnEntityDao(DaoConfig config) {
        super(config);
    }
    
    public ColumnEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"COLUMN_ENTITY\" (" + //
                "\"SLUG\" TEXT PRIMARY KEY NOT NULL ," + // 0: slug
                "\"NAME\" TEXT," + // 1: name
                "\"AVATAR\" TEXT," + // 2: avatar
                "\"DESCRIPTION\" TEXT," + // 3: description
                "\"FOLLOWERS_COUNT\" INTEGER NOT NULL ," + // 4: followersCount
                "\"POSTS_COUNT\" INTEGER NOT NULL );"); // 5: postsCount
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"COLUMN_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ColumnEntity entity) {
        stmt.clearBindings();
 
        String slug = entity.getSlug();
        if (slug != null) {
            stmt.bindString(1, slug);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String avatar = entity.getAvatar();
        if (avatar != null) {
            stmt.bindString(3, avatar);
        }
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(4, description);
        }
        stmt.bindLong(5, entity.getFollowersCount());
        stmt.bindLong(6, entity.getPostsCount());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ColumnEntity entity) {
        stmt.clearBindings();
 
        String slug = entity.getSlug();
        if (slug != null) {
            stmt.bindString(1, slug);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String avatar = entity.getAvatar();
        if (avatar != null) {
            stmt.bindString(3, avatar);
        }
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(4, description);
        }
        stmt.bindLong(5, entity.getFollowersCount());
        stmt.bindLong(6, entity.getPostsCount());
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public ColumnEntity readEntity(Cursor cursor, int offset) {
        ColumnEntity entity = new ColumnEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // slug
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // avatar
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // description
            cursor.getInt(offset + 4), // followersCount
            cursor.getInt(offset + 5) // postsCount
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ColumnEntity entity, int offset) {
        entity.setSlug(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setAvatar(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDescription(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setFollowersCount(cursor.getInt(offset + 4));
        entity.setPostsCount(cursor.getInt(offset + 5));
     }
    
    @Override
    protected final String updateKeyAfterInsert(ColumnEntity entity, long rowId) {
        return entity.getSlug();
    }
    
    @Override
    public String getKey(ColumnEntity entity) {
        if(entity != null) {
            return entity.getSlug();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ColumnEntity entity) {
        return entity.getSlug() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
